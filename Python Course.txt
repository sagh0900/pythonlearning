Python:

1. Pass is a keyword in python which tells the interpreter do nothing.
2. To access instance attributes, only then you need to create an object and refer it using self.<attribute_name>. 
   For class attributes, you don't need to create instance or use self to access them, you can refer them directly using CLASSNAME.<attribute Name>
3. The Python command line is Read-EVALuate-Print-Loop, reffered as REPL
4. _ in repel refers to latest output value printed.
5. Strings & Bytes
	a) single and multi line string quoting
	b) Adjacent string literal concatenation
	c) Universal newline
	d) Escape sequence for control characters
	e) Raw strings suppress the escaping mechanism
	f) Convert other types with strr() constructor
	g) Zero-based square bracker indexing of strings
	h) Rich variety of string methods
	i) Python 3 source encoding is UTF-8
	j) bytes is a sequences of bytes, str is a sequence of unicode codepoints
	k) bytes literals are prefixed with lowercase based
	l) Convert str to bytes with encode(), bytes to str with decode() //You need to encoding
6. Lists
	a) Lists are mutable, heterogeneous sequences of objects
	b) lists literals delimited by square brackets, items separated by commas
	c) Zero-based, square-bracket indexing to retrieve objects
	d) Square-bracker assignment to replace objects
	f) Grow lists with append() 
	g) Construct from other sequences using list() constructor
7. Dictionaries
	a) Dictionaries assosiate keys with values
	b) Literal dicts delimited by curly braces
	c) Literal key-value pairs separated by commas, with a colon between each key and value
8. For-Loops
	a) Take items one-by-one from an iterable object, binding a name to the current item.
	b) Correspond to for-each loops in other languages
		for item in items:
		    ....body....
9. Advanced command line arguments passing
	a) Python Standard Library: argspars
	b) Many third party options such as docopt module
10. 2 number of lines must be separated from each function. Its highly recommended by PEP eight.
11. Shebang in mac or linux only work after chmod permission to chmod +x file.py
12. Modules
	a) Python code is place in *.py files called modules
	b) Modules can be executed directly with
		python moudle_name.py
	c) Brought into the REPL or other modules with 
		import module_name
	d) Named functions defined with the def keyword
		def function_name(arg1,..argn):
	e) Return from functions using return keyword with optional parameter
	f) Omitted return parameter or implicit return at end retuns None
	g) Use __name__ to determine how the module is being used
	h) If __name__ == "__main__" the module is being executed
	i) Module code is executed exactly once, on first import
	j) def keyword is a statement which binds a function definition to a name
	k) Command line arguments are accessible through sys.argv
	l) The script filename is in sys.argv[0]
	m) Docstrings are a standalone literal string as the first statement of a function or module
	n) Docstrings are delimited by triple quotes
	o) Docstrings provide help()
	p) Module docstrings should precede other statements
	q) Comments begin with # and run to the end of the line
	r) A special comment on the first line beginning #! controls module execution by the program loader
13. Python Name Scopes
	a) Local: Inside the current function
	b) Enclosing: Any and all enclosing functions
	c) Global: Top-level of module
	d) Built-in: Provided by the bultins module
14. Objects
	a) Think of named references to objects rather than variables
		1) Assignment attaches a name to an object
		2) Assigning from one reference to another puts two name tags on the same object
	b) The garbage collector reclaims unreachable objects
	c) id() returns a unique and constant identifier
		1) Rarely used in production
	d) The is operator determines equality of identity
	e) Test for equivalence using ==
	f) Function arguments are passed by object-reference
		1) Functions can modify mutable arguments
	g) Reference is lost if a formal function argument is rebound
		1) To change a mutable argument, replace its contents rather than replacing the whole object
	h) return also passes by object-reference
	i) Function arguments can be specified with defaults
	j) Default argument experessions evaluated once, when def is executed
	k) Python uses dynamic typing
		1) We don't sepcify types in advance
	l) Python uses strong typing
		1) Types are not coerced to match
	m) Names are looked up in four nested scopes
		1) LEGB rule: local, Enclosing, Global and Built-ins
	n) Global references can be read from a local scope
	o) Use global to assign to global references from a local scope
	p) Everything in python is an object
		1) This includes modules and functions
		2) They can be treated just like other objects
	q) import and def result in binding to named references
	r) type can be used to determine the type of an object
	s) dir() can be used to introspect an object and get its attributes
		1) type(module_name) (To know the type of object or module)
		2) dir(module_name) (attributes of object or module or type)
		3) type(module.function_name) (to know the type of function)
		4)dir(module.function_name) (To check the attributes of a function)
		5) module.function_name.__name__ (states the name of the function)
		6) module.function_name.__doc__ (To know the doc string of any function)		
	t) The name of a function or module can be accessed through its __name__ attribute
	u) The docstring for a function or module object can be accessed through its __doc__ attribute
	v) Use len() to measure the length of a string
	w) You can multiply the length of a string
		1) Produces a new string with multiple copies of the operand
		2) This is called the repetition operation
15. Collections
	a) Tuples a()
		1. Delimiting paranthesis are optional for one or more elements
			for ex: p = 1, 3, 5, 7, 9
			a. Nested Tuple:
				for ex:  a = ((280, 394), (1184, 1210), (2620, 2924), (5020, 5564))
						 a[2] = (2620 ,2924)
						 a[2][1] = 2924
						 len(a) = 4
			b. To create single value/object tuple:
				for ex: k = (391,)
						type(k) = > <class, tuple)
			c. To create an empty tuple.
				for ex: k = ()
			d. tuples can be multiplied and printed to console.
		2. Tuples are useful for multiple return values
			def minmax(items)
				return min(items), max(items)
		3. Tuple unpacking allows us to destructure directly into named references
			lower, upper = minmax([83, 33, 84, 32, 85, 31, 86]
			lower = > 31, upper = > 86
		4. Tuple unpacking works with arbitrary nested tuples (although not with other data structures)
			for ex: (a, (b, (c, d))) = (4, (5, (6, 7)))
		5. Use tuple(interable) constructor to create tuples from other iterable series of objects. for e: tuple([561, 1105, 1729]) gives output (561, 1105, 1729) and tuple("jelly") gives output: ('j', 'e', 'l', 'l', 'y') 
		6. The in and not in operators can be used with tuples - and other collection types - for membership testing. for ex: 5 in (3, 5, 17, 257) gives output True
	b) Strings & its methods
		1. join(): Call the join() method on the separator string (k = ';'.join(['str', 'ing']) gives 'str;ing' )
		2. split(): Use split() to divide a string into a list (k.split(';') gives ['str', 'ing'] )
		3. Without an argument split() divides on whitespace (''.join(['str', 'ing']) gives 'string'
			a) Concatinating together the collection of strings in python can be done using empty separator, which is Python idiom.
			for ex: ''.join(['high', 'way', 'man']) gives 'highwayman'.
		4. partition(): The partition method divides string into three around a separator: prefix, separator, suffix. ex: "unforgetable.partition("forget") gives ('un', 'forget', 'able')
		5. Tuple unpacking is useful to destructure the result. 
			ex1: departure, separator, arrival = "London:edinburgh".partition(':')
				departure = 'London' arrival = 'Edinburgh'
			ex2: origin, _, destination = "seattle-boston".partition('-')
				origin = 'Seattle' destination = 'Boston'
		6. format(): USe format() to insert values into strings. Replacememt fields delimited by { and }.
			ex: "The age of {0} is {1}".format('Jim', 32)
				"Current position {latitude} {longitude}".format(lattitude="60N",
																 longitude="5E")
			a) Field names can be omitted if used in sequence.
			b) Integer field names matched with positional arguments
			c) Named fields are matched with keyword arguments
			d) Access values through keys or indexes with square brackets in the replacement field
			e) Access attributes using dot in the replacement field.
				pos = (6, 2, 8)
			   "Position in graph x={pos[0]} y={pos[1]} z={pos[2]}".format(pos=pos)
			f) The replacement field mini-language provides many value and alignment formatting options.
				>>> import math
				>>> "Math constants: pi={m.pi}, e={m.e}".format{m=math} or
				>>> "Math constants: pi={m.pi:.3f}, e={m.e:.3f}".format{m=math}
	c) range():
		a) range(x): x is the stop value which is one-past-the-end. range(5): [0,1,2,3,4)
		b) Ranges are half-open-start is included but stop is not. range(0,5): [0,1,2,3,4]
		c) Stop value of a range used as start value of consecutive range. range(5,10): [5,6,7,8,9]
		d) Optional thrid step value. range(0,10,2): [0,2,4,6,8]
		e) Prefer direct iteration over iterable objects such as lists.	
			usgage: s = [0, 1, 4, 6, 13]
					for v in s
						print(v) # range is not best practice to use in for loop.
		f) prefer enumerate() function for counters. Enumerate yeilds (index, value) tuples from lists.
			for ex: t = [6,10,15,27,33]
					for p in enumerate(t):
						print(p)
				gives...
				(0,6) (1,10) (2,15) (3,27) (4,33) i.e, (index, value) tuples 
		g) often combined with tuple unpacking.
			for ex: for i, v in enumerate(t):
						print("i = {}, v = {}".format(i,v))
				gives...
				i = 0, v = 6
				i = 1, v = 10
				i = 2, v = 15
				i = 3, v = 27
				i = 4, v = 33
	d) list[]:
		1. zero and positive integers for indexing from the front
			ex: s = "show how to index into sequences".split()
				s gives ['show', 'how', 'to', 'index', 'into', 'sequences']
				s[4] gives 'into'
		2. Indexing from the end rather the begining is one more way to use. It applies to tuples as well. Negative integers index from the end. The last element is at index -1
			for ex: last index of the sequence is -1. 
			s[-1] = 'sequences'
			s[-2] = 'into'
			s[-3] = 'index'
			s[-4] = 'to'
			s[-5] = 'how'
			s[-6] = 'show'
		3. slicing extracts part of list.
			for ex: s[1:4] = ['how', 'to', 'index']
					s[1:-1] = ['how', 'to', 'index', 'into'] (slicing works with -ve indexes as well)
		4. Omitting start or stop indices (optional)
			for ex: s[3:] gives ['index', 'into', 'sequences']
					s[:3] gives ['show', 'how', 'to']
		5. Half-open ranges give complimentary slices.		
			s[:x] + s[x:] == s
		6. Since stop and start indices are optional, we can use this idiom in Python to copy a list.
			for ex: full_slice = s[:] 
					full_slice gives ['show', 'how', 'to', 'index', 'into', 'sequences']
			Note: full_slice is not same object as s but it has equlivalent value.
					ex: full_slice is s gives False
						full_slice == s gives True
			Note: Modifying a list will alter its copy as well using this approach
		7. u = s.copy() (copy method of list)
			u gives ['show', 'how', 'to', 'index', 'into', 'sequences']
		8. lists can be copied using list() constructor as well. # Best practice in python for list copying since it has the advantage to work on any iterable source but not just lists.
			for ex: v = list(s)
				v gives ['show', 'how', 'to', 'index', 'into', 'sequences']
		9. All the copy approaches above will create a new copy of values in list but not copy actual list object.
		
		10. Copies are Shallow.
			for ex: a = [ [1, 2], [3, 4]]
			[1, 2] and [3, 4] are inner lists and a object has reference to outer list indices.
			a. When copying using full_slice. b = a[:] will refer/copy to only outer list indices of a. 
				- > here a is not b. but a == b (values are same but two different objects)
				- > a[0] and b[0] refer to the same inner list object. 
			b. Altering a indices will not modify b indices values.
				for ex: a[0] = [8, 9] which change a to [[8, 9], [3, 4]]
				    but b[0] will be [1, 2] only.
			c. However append method of list will modify the copy when new value is appended to original list.
				for ex: a[1].append(5) gives [[8, 9], [3, 4, 5]
						b also will be modified: [[1, 2], [3, 4, 5]]
			d. Lists can be repeated using * operator
				for ex: c = [1, 2]
						d = c * 4 gives [1, 2, 1, 2, 1, 2, 1, 2]
					Note: Most often used for initializing list of known size with constant value.
						ex: [0] * 4 gives [0, 0, 0, 0]
					i.e, Multiple references to one instance of constant in the produced list. 
					Note: Repetition will actually copy the reference but not the actual value.
						for ex: s = [ [-1, +1] ] * 5 will create a new list s with 5 indices with referencing to the same object.
							i.e, s == [ [-1, +1], [-1, +1], [-1, +1], [-1, +1], [-1, +1] ]
							- > Performing append operation s[3].append(7) will refer to the modified actual inner list.
							i.e, s == [ [-1, +1, 7], [-1, +1, 7], [-1, +1, 7], [-1, +1, 7], [-1, +1, 7] ] because all the inner lists are referring to same inner list.
			e. Finding elemets in list.
				index(item) returns the integer index of the first equlivalent element, also raise ValueError if not found.
					for ex: w = "I love to visit Norway anytime".split()
							w = ['I', 'love', 'to', 'visit' 'Norway', 'anytime']
							i = w.index('love') => 1
							j = w.index('India') => ValueError # this must be handled using Exception.
						w.count('to') => 1 # which returns the repeated string in the list.
			f. Memebership testing:			
					33 in [1, 33, 65,72] => True 
					32 not in [1, 32, 69, 99] => False
			g. To delete the members from the list using 'del' keyword. (Deleting by position)
					for ex: w = "I love to visit Norway anytime".split()
						w = ['I', 'love', 'to', 'visit' 'Norway', 'anytime']
						del w[5] = > ['I', 'love', 'to', 'visit' 'Norway']
					1. Deleting using value:
						w.remove('I') => ['love', 'to', 'visit' 'Norway']
					2. Combining both:
						del w[w.index('to')] => ['love', 'visit' 'Norway']
					3. Attempting to remove a member which is not present will return value error.
						for ex: w.remove('India') => ValueError: list.remove(x): x not in list. 
			h. Inserting an item to list can be done using insert method.
					for ex: w.insert(index, item)
						w = "I love to visit Norway".split()
						w.insert(5, "anytime") gives 
						w = ['I', 'love', 'to', 'visit' 'Norway', 'anytime']
					1. We can convert the list of words back into string using:
						''.join(w) = 'I love to visit Norway anytime'
			i. Concatinating lists using addition(+) operator will result in new list without modifying operands:
					for ex: m = [2, 1, 3] n = [4, 5, 6]
						k = m + n = > [2, 1, 3, 4, 5, 6]
					1. In-place extension with += operator or extend() method.
						for ex: k += [19, 18, 20] = > [2, 1, 3, 4, 5, 6, 19, 18, 20]
						or 	k.extend([100, 101]) = > [2, 1, 3, 4, 5, 6, 19, 18, 20, 100, 101] 
						Note: This can be used on any iterable objects. 
			j. Reversing and sorting lists:
					1. reverse(): 
						for ex: g = [1, 2, 3, 4, 5]
							g.reverse() = > [5, 4, 3, 2, 1]
					2. sort():
							for ex: h = [4, 2, 1, 5, 3]
								h.sort() = > [1, 2, 3, 4, 5]
								h.sort(reverse=True) = > [5, 4, 3, 2, 1]
					3. key argument to sort() method accepts a function for producing a sort key from an item.
						for ex: w = "love I visit to anytime Norway".split()
								w = > ['love', 'I', 'visit', 'to', 'anytime', 'Norway']
							w.sort(key=len) = > ['I', 'love', 'to', 'visit' 'Norway', 'anytime']
							''.join(w) = 'I love to visit Norway anytime'
					4. sorted() function can only be used when not modify original list but create a new sorted list.
						for ex: x = [4, 9, 2, 1]
								y = sorted(x) = > y = [1, 2, 4, 9] but actual x will be unmodifed.
					5. reversed() function will reverse the list values but stored in a memory. We need list() constructor to create the list from reversed values in the memory.
						for ex: p = [9, 3, 1, 0]
								q = reversed(p)
								q <_|
								<list_reverseiterator object at 0x1007bf29>
								list(q) 
								[0, 1, 3, 9] because reversed will return an iterator.
		e) Dictionaries: Unordered mapping from unique, immutable keys to mutable values
			for ex: urls = {'Google': 'https://google.com',
							'Pluralsight': 'https://pluralsight.com',
							'Tumblr': 'https://www.tumblr.com'} 
						- > key and value pairs comma separated.
						- > corresponding keys and values joined by colon.
					1. Values are accessed by the keys.
						for ex: urls['Tumblr'] => 'https://www.tumblr.com'
						Note: Keys must be unique in any single dictionary.
					2. Interanally dictionary maintains pairs of the references to the key objects and value objects.
						- > key objects must be immutable. (strings, numbers and tuples but not lists)
						- > Value objects can be mutable.
						- > order of the items may vary for every run of same program.
					3. dict() constructor accepts:
						- > iterable series of key-value 2-tuples.
							for ex: order = [('krishna', 33), ('arun', 35), ('asha', 31)]
									d = dict(order)
									d = > {'krishna': 33, 'arun': 35, 'asha': 31}
							Note: items in a dictionary are not stored in any particular order.
					4. Keyword arguments - requires keys and valid python identifiers. A mapping such as another dict.
						for ex: order = dict(a='arun', s='krishna', d='asha')
								order = > {'a': 'arun', 'd': 'asha', 's': 'krishna'}
					5. Dictionary copying is shallow by default copying only the references to the key and value objects, not the value objects themselves, there are two ways of copying a dictionary.
						1. copy() method:
							for ex: d = dict(goldenr=0xDAA520, ieml=0x4B0082, tastygav=0xFFF5EE, egree=0xDDE4AA)
									d = > {'ieml': 221958, 'goldenr': 1621910, 'tastygav': 		383224, 'egree': 322434}
									e = d.copy() (though we use hexadecimal, they copied decimal values to new dict)
									e = > {'ieml': 221958, 'goldenr': 1621910, 'tastygav': 		383224, 'egree': 322434}
						2. dict(existing_dictionary) method:
									f = dict(e)
									f = > {'ieml': 221958, 'goldenr': 1621910, 'tastygav': 		383224, 'egree': 322434}
						3. update() method: To extend the dictionary with the definitions of another dictionary, we can use update() method. 
							for ex: d = dict(goldenr=0xDAA520, ieml=0x4B0082, tastygav=0xFFF5EE, egree=0xDDE4AA)
									f = dict(lnogdro=0xFDA340, kisr=0x5C9128)
									f.update(d)
									f => {'ieml': 221958, 'goldenr': 1621910, 'tastygav': 		383224, 'egree': 322434, 'lnogdro':3120183, 'kisr':201607}
							b. update() replaces values corresponding to duplicate keys.
								for ex: stocks = {'GOOG': 891, 'AAPL': 416, 'IBM': 194}
										stocks.update({'GOOG': 894, 'YHOO': 25})
										stocks => {'IBM: 194, 'GOOG': 894, 'YHOO': 25, 'AAPL': 416}
							c. dictionaries are iterables.
									dream = dict(goldenr='May', ieml='June', tastygav='Everytime', egree='Fantasy', lnogdro='Nostalgia', kisr='Lifetime')
									for ex: for key in dream:
												print("{key} => {value}".format(key=key, value=dream[key]))
									egree => Fantasy
									ieml => June
									lnogdro => Nostalgia
									.
									.
									Note: Order is not arbitrary, i.e, no specific order.
						4. dict.values() method:If we want to iterate only through values of dictionary, this returns an object which provides an iterable view onto the dictionary values without causing the values to be copied. We can only print the values. (There is no way to print both keys and values through this method)
							for ex: for value in dream.values():
										print(value)
								...
								Fantasy
								June
								May
								Nostalgia
								..
						5. dict.keys() method: which provides aview into the keys of dictionary, although not a best practice because default iteration of dictionaries is by key.
							for ex: for key in dream.values():
										print(key)
									egree
									ieml
									goldenr
									lnogdro
									..
						6. dict.items() method: This returns items view yeild each key-value pair as a tuple.
							for ex: for key, value in dream.items():
							print("{key} = > {value}".format(key=key, value=value))
								egree => Fantasy
								ieml => June
								goldenr => May
								lnogdro => Nostalgia
								..
						7. Tuple unpacking: By using it in the statement, we can get both the key and value in one operation without the extra lookup.
						8. Dict Membership: The in and not in operators work on the keys.
							for ex: 'ieml' in dream
								True 
									'gymlg; in dream 
								False
						9. del keyword: to remove by key.
							for ex: del dream['kisr']
									dream => f => {'ieml': 221958, 'goldenr': 1621910, 'tastygav': 		383224, 'egree': 322434, 'lnogdro':3120183}
						10. keys in dictionary must be immutable where values can be modified.
								for ex: dictionary with values as list. Dictionary cannot be modified here but the list values can be.
									m = {'H': [1, 2, 3],
										 'He': [3, 4],
										 'Be': [6, 7]}
									m['H'] += [4, 5, 6, 7]
									m = >  {'Be': [6, 7], 'H': [1, 2, 3, 4, 5, 6, 7], 'He': [3, 4]}
							Note: Exiting keys cannot be modified, only can be deleted. Dictionary itself is mutable.
								m['N'] = [13, 14, 15]
								m = >  {'Be': [6, 7], 'H': [1, 2, 3, 4, 5, 6, 7], 'He': [3, 4], 'N': [13, 14, 15]}
						 11. Dictionaries can be printable in much pretty human readable form using pprint module.
							for ex: from pprint import pprint as pp (best practice to use alias)
								pp(m) => {'H': [1, 2, 3],
										 'He': [3, 4],
										 'Be': [6, 7]}
		f) Set: Set data type is an undordered collection of unique elements.
				a. The collection is mutable in so far as elements can be added and removed from the set, but each element must itself be immutable very much like the keys of a dictionary. 
				b. Sets have a literal form very similar to dictionaries and uses curly braces.
				c. Each item is a single object rather than key-value pair separated by a colon.
					for ex: p = {6, 28, 496, 8128, 33550336}
						p = > {334400336, 8128, 28, 496, 6}
				d. Set is of type 'set' and is unordered.
				e. Create an empty set we should use set() constructor, but assigning empty open-close curley braces result in creation of empty dictionary.
					for ex: p = {} is a dictionary.
							p = set() is a set. p = > set()
				f. Duplicates are not allowed or discarded when creating a set, even using the list to create a set, if duplicates are there, will be discarded when creation of set.
					for ex: s = set([1, 2, 4, 16, 32, 64])
							s = > {2, 1, 4, 64, 32}.
						Note: Sets can be often used to remove duplicates.
								for ex:  list = [1, 2, 4, 16, 32, 64, 64]
										 s = set(list) 
										 s = > {1, 2, 4, 16, 32, 64}
				g. Sets are iterable although order is arbitrary. 
						for ex: for x in {1, 2, 4, 8, 16, 32}:
									print(x)
								32
								1
								4
								2 ..
				h. Memebership is fundamental operation for sets
					for ex: q = {2, 9, 6, 4}
						3 in q 
						False 
						3 not in q
						True 
				i. add() method is used to add single element to set
						for ex: k = {81, 108}
								k.add(54)
								k = > {81, 108, 54}
							Note: adding existing element doesn't show any impact, neither produces any error.
				j. update() method is used to add multiple elements to the set in one go, even can be used another set.
						for ex: k.update([37, 128, 97])
								k = > {128, 97, 37, 12, 108, 81, 54)
				k. Removing of elements can be done using two methods.
					1. remove(): 
							for ex: k.remove(97) (if element is not avaialble, KeyError is raised)
									k = > {128, 37, 12, 108, 81, 54)
					2. discard():
							It doesn't throw errors if there is no available element.
				l. copy() method: Performs a shallow copy (copy the references but not the objects)
							for ex: j = k.copy()
									j => {128, 37, 12, 108, 81, 54)
						Note: set() constructor also can be used to copy.
							for ex: m = set(j)
									m = > {128, 37, 12, 108, 81, 54)
				m. Sets can be powerfully used on set algebra which two sets have subset, superset or disjoint relations. 
					for ex:	
						set1 = {'a', 'b', 'c', 'd', 'e'}
						set2 = {'b', 'd', 'e', 'f', 'g'}
						set3 = {'b', 'e'}
						set4 = {'b', 'c', 'e', 'h'}
						set5 = {'f', 'g', 'c', 'a'}
						set6 = {'e', 'd'}
						set7 = {'b'}
						set8 = {'g', 'h'}
					ex1: To find all elements of set1 or set2 or both 
							set1.union(set2)
							= > {'a', 'b', 'c', 'd', 'e', 'f', 'g'}
						Note: set1.union(set2) == set2.union(set1) returns True
					ex2: To find common elements of set1 and set2
							set1.intersection(set2)
							= > {'b', 'e', 'd'}
						Note: set1.intersection(set2) == set2.intersection(set1) returns True
					ex3: To find all elements of set1 which are not in second set.
							set1.difference(set2)
							= > {'a', 'c'}
						Note: set1.difference(set2) == set2.difference(set1) returns False
					ex4: To collect the elements in set1 and set2 but not in both.
							set1.symmetric_difference(set2)
							= > {'a', 'c', 'f', 'g'}
						Note: set1.symmetric_difference(set2) == set2.symmetric_difference(set1) returns True
				n) Predicate methods: Which tells us about relationships between sets.
						for ex: one set is subset of other set.
							set3.issubset(set2)
							= > True 
						ex2: one set is superset of other set.
							set4.issuperset(set3)
							= > True
						ex3: to test the sets have no members in common.
							set(7).isdisjoint(set4)
							= > True
		g) Collection Protocols:
				1. In python, a protocol is a set of operations or methods that a type must support if it is to implement that protocol. 
				2. Protocols need not be defined in the source code as separate interfaces or base classes like in other typed languages like C# or Java.
				3. In python, we just need an object which provide functioning implementations of those operations.
					The below is a list of collections which support the specific protocols.
						a. Container : str, list, range, tuple, bytes, set, dict.
							Support: Membership testing using in and not in operators.
						b. Sized : str, list, range, tuple, bytes, set, dict.
							Support: can determine number of elements with len(s)
						c. Iterable : str, list, range, tuple, bytes, set, dict.
							Support: Can produce an iterator with iter(s)
										for item in iterable:
											do_something(item)
						d. Sequence : str, list, range, tuple, bytes.
							Support: 1. retreive elements by index
											item = seq[index]
									 2. find items by value
											index = seq.index(item)
									 3. count items 
											num = seq.count(item) 
									 4. Produce a reversed sequence 
											r = reversed(seq) 
						e. Mutable  Sequence: list 
						f. Mutable Set: set 
						g. Mutable Mapping: dict
16. Exceptions:
			
			1. Exception handling is amechanism for stopping "normal" program flow and continuing at some surrounding context or code block. (exceptional.py)
				a) Raise an exception to interrupt program flow.
				b) Handle an exception to resume control.
				c) Unhandled exception will terminate the program
				d) Exception objects contain information about the exceptional event.
				e) Except blocks must not be empty and are not allowed in python. If empty, indentationError, SyntaxError or NameError will be thrown which are usually handled only while developing Python IDE. They can be replaced in a program with "pass" statement.
				f) Exception objects can be converted using str(e) constructor.
				g) raise is a keyword used at end of exception handling block. Without a parameter, raise simply re-raises the excepption that is being currently handled.
				h) Output of print() can be redirected using the optional file argument.
					for ex:     except OSError as e:
									print(e, file=sys.stderr)
			2. Exceptions are part of the API
				a) Callers need to know 'what exceptions' to expect and 'when'. (roots.py)
				b) Exception are parts of families of related functions referred to at "protocols"
					for ex: Objects which implement the sequence protocol should raise and IndexError exception for indices which are out of range. 
						i) The exceptions which are raised as much a part of function's specification as the arguments it accepts, and as such must be implemented and documented appropriately. 
				c) Often built-in exceptions in python to raise and handled. 
					i)	IndexError	(is raised when Index integer is out of range)
					ii)	ValueError	(is raised when object is of right type but contains an inappropriate value.
					iii)KeyError	(raised when look-up in a mapping fails)
					iv)	TypeError	(Avoid protecting against TypeError, we can't address all types in a single program)
					v)	OSError
					v)	More & User Defined Exceptions 
				d) Pythons strong philosphy. : Its easier to ask forgiveness than permission (EAFP)
				e) finally-block.: finally-block is executed no matter how try-block exits. (finally.py)
					i) Errors are like bells and if we make them silent, they are of no use.
			3. Platform-specific modules:
				a) Detecting a single keypress from Python such as the press any key to continue functionality at the console requires use of operating system modules. We can't use the bult-in input function because that waits for the user to press Return key before giving us a string. (keypress.py)
					i) To implement this:
						- > In Windows we use, msvcrt module. 
						- > In linux/mac we use, sys, tty and termios modules. 
				b) Platform-specific actions can be implemented using Easy to Ask Forgiveness than Permission approach along with catching ImportErrors.
17. Iterables: Iterable Objects and Iterators
		a. list comprehensions
			for ex: words = "I love to visit Norway anytime".split()
					words = > ['I', 'love', 'to', 'visit', 'Norway', 'anytime']
				Comprehension for list types: (Easily understandable)
					for ex: [len(word) for word in words]
						= > [1, 4, 2, 5, 6, 6]
				1) General form of list comprehension is: 
						[ expr(item)  for item in iterable ]
						Note: This comprehension is equilvalent to following for loop.
							for ex: lengths = []
										for word in words:
											lengths.append(len(word))
									print(lengths)
				2) Note: The type of output produced by list comphrehension is a list.
				3) Comprehensions produced by list type may result in duplicate values
					for e: from math import factorial as fact
						   f = [len(str(fact(x))) for x in range(14)]
						   f = > [1, 1, 1, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14]
		b. set comphrehension
			for ex: { expr(item) for item in iterable }
				1. The comprehensions produced by set type will also result a set.
				2. Using set comprehensions we can eliminate the duplicate values in the produced data set.
					for ex: {len(str(fact(x))) for x in range(14)]
						= > {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14]
		c. Dictionary Comprehension (comprehension.py)
			a) similar to set but we provide two colon seperated expressions for key and value, which will be evaluated in tandem for each item.
				for ex: { key_expr:value_expr for item in iterable }
						
				ex:		from pprint import pprint as pp
						country_to_capital = {'UK': 'London',
										   'Sweden': 'Stockholm',
										   'Norway': 'Oslo',
										   'Netherlands': 'Amsterdam'}
					Note: To use dictionary comphrehension is to invert a dictionary so we can perform effecient lookups.  
						for ex: capital_to_country: {capital: country for country, capital in 	country_to_capital.items()}
						
								Note: The dictionary comphrehension is not usually operate dictionary on sources while they can, but recall that iterating over a dictionary yeilds only the keys.
						pp(capital_to_country)
						= > {'London': 'UK',
							 'Stockholm': 'Sweden',
							 'Oslo': 'Norway',
							 'Amsterdam': 'Netherlands'}
								Note: 1. If we want both keys and values to print, we should use items() method of the dictioanry. 
									  2. Duplicates in the list while using dictionary comphrehension, later keys will overrite earlier keys.
										for ex: words = ["hi, "hello", "foxtrot", "hotel"]
												{x[0]: x for x in words }
												= > {'h': 'hotel', 'f': 'foxtrot'}
									  3. Don't cram too much complexity into comprehensions
			Note: All the three comprehension types support an optional filtering clause, which allows us to choose which items of the source are evaluated by the expression on the left. (primes.py)
					Note: Use comprehensions only if it is not complex to write else use for loop construct.
		
		d. Iteration protocols:	
			1. Iterable Protocol:
				a. Iterable objects (ex: list) can be passed to built-in iter() function to get an iterator.
					for ex: iterator = iter(iterable)
			2. Iterator Protocol:
				a. Iterator objects can be passed to the bult-in next() function to fetch the next item.
					for ex: item = next(iterator)
				ex: iterable = ['Spring', 'Summer', 'Autumn', 'Winter']
					iterator = iter(iterable)
					next(iterator)  = > 'Spring'
					next (iterator) = > 'Summer' Note: each call will move to next item in iterator
				Exception Note: if it reaches end, and still we do call next(iterator) will raise an exception, StopIteration. We need to handle the exception for different errors.  (iterations.py)
		e. Generator Functions: Most powerful feature of Python  (genarator.py) 
			1. Python generators provide the means for describing iterable series with code and functions.
			2. They only compute the next value in sequence on demand. 
			3. Can model inifinite sequences such as daa streams with no definite end.
			4. Proper design of generator functions can make generic stream processing elements which can be composed into sophosticated pipelines.
			5. Using yield keyword at least once in a python function definition makes it a generator function. 
			6. Generator functions may have return keyword without arguments. 
				for ex: 
				def gen123():
					yield 1
					yield 2
					return 
				g = gen123()
				g = > <generator object gen123 at 0x1006fd3c0>
				next(g) = > 1 next(g) = > 2 next(g) = > 3
				next(g) = > raises StopIteration Exception similar to any other collection.
					Also can be iterated through for loop,
						for v in gen123():
							print(v)
						..
						1
						2
						3 
				Note: Assigning Generator functions to different variables creates different generator objects.
				h = gen123() = > <generator object gen123 at 0x1006fd3c0>
				i = gen123() = > <generator object gen123 at 0x1006fe9q1>
						i.e, h is not i
			7. Generators resume execution.
			8. Can maintain state in local variables
			9. Complex comtrol flow 
			10. Lazy evaluation.
					a) Only when the next result is requested, generator executes.
						Apps: infinite sequences, sensor readings, mathematical series, massive files.
		f. Generator Comprehensions: 
			1. Similar syntax to list comprehensions
			2. Create a generator object
			3. Concise
			4. Lazy Evaluation
			
			Note: Generator expressions are cross between comprehension and generator functions.
				i) Generator expressions result in creation of generator object which produces the specified sequence lazily. 
					syntax: (expr(item) for item in iterable)
						for ex: m_s = (x*x for x in range(1, 5))  # squares of numbers from 1 - 10
					However, above statement doesn't produce any result but creates a generator object.
						= > We need to convert the generator object to list variable.
							1. list(m_s) = [1, 4, 9, 16]
							Note: reapeating list(m_s) doesn't print anything since already yeilded values from generator object created a list.
				ii) Generators are single use objects.
				iii) Each time we call a generator function, we create a new generator object. 
				iv) To create a generator from generator expression we must execute the expression again. 
					Note: Python builtin functions can be directly applied on generator comprehensions.
							for ex: sum(x*x for x in range(1,100))
						clause: sum(x*x for x in range(1,100) if is_prime(x))
						
		g. Iterable Objects:
				1) list
				2) set 
				3) dict 
				4) tuple 
				5) range
				6) str
			    7) bytes
				8) Any object that follows the iterable protocol. 
					Note:	Python provides number of built-in fucntions for performing common iterator operations. 
					i)	These functions form the call of a sort of vocabulary for working with iterators, and they can be combined to produce powerful statements in very concise, readable code. 
								= > look for python3 itertools and usage.
						for ex:	sum of first thousand numbers using islice() and count() (itertoolsex.py)
							Other two important iterable functions are:	any([False, False, True)
																		True 
																		all([False, False, True])
																		False
												for ex:	any(is_prime(x) for x in range(1328, 1361))
														False 
					ii)	If we have list and draw the mapping between each corresponding elements, we use zip function from itertools and result will be tuples. (zipper.py)
						ghanta = ['arun', 'ram', 'sai', 'asha')
						others = ['hema', 'vyshu', '-', 'naveen')
							for item in zip(ghanta, others):
								print(item)
							
						
				
						
				
										

					
				
				
			
				
			
			
			
						
						
		
								
							
							
						
								
									
					
			
								
					
						
					
				
			
			
				
	
			
				
		
		
		
	
	